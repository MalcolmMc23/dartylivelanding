# Task ID: 9
# Title: Implement State Transition Metrics and Monitoring
# Status: pending
# Dependencies: 1, 8
# Priority: low
# Description: Add comprehensive metrics, monitoring, and analytics for state transitions, queue times, and system health.
# Details:
1. Implement state transition metrics:
   - Track time spent in each state
   - Measure transition frequencies
   - Log anomalous patterns
2. Add queue monitoring:
   - Track queue length over time
   - Measure average wait time
   - Identify bottlenecks
3. Implement skip/end analytics:
   - Track skip vs. end rates
   - Measure average call duration
   - Identify patterns in user behavior
4. Create system health dashboard:
   - Monitor Redis performance
   - Track LiveKit room usage
   - Alert on abnormal conditions
5. Implement structured logging for all operations

Example implementation:
```javascript
async function recordStateTransition(userId, fromState, toState) {
  const now = Date.now();
  
  // Record transition in logs
  console.log(`State transition: ${userId} ${fromState} -> ${toState}`);
  
  // Store transition in Redis for analytics
  await redis.zadd(`analytics:transitions:${fromState}:${toState}`, now, userId);
  
  // If user had previous state timestamp, calculate duration
  const userData = await redis.hgetall(`user:${userId}`);
  if (userData.lastStateChange) {
    const duration = now - userData.lastStateChange;
    await redis.zadd(`analytics:duration:${fromState}`, duration, userId);
    
    // Record in time-series database for graphing
    await metrics.recordDuration(fromState, duration);
  }
  
  // Update user's last state change time
  await redis.hset(`user:${userId}`, 'lastStateChange', now);
}
```

# Test Strategy:
1. Verify metrics are recorded correctly
2. Test dashboard with simulated load
3. Validate alerting functionality
4. Test analytics queries for performance
5. Verify metrics accuracy under load
6. Test integration with monitoring systems
7. Validate log format and completeness
