# Task ID: 7
# Title: Implement Check-Disconnect API Endpoint
# Status: pending
# Dependencies: 4, 5
# Priority: medium
# Description: Develop API endpoint for polling disconnection flags and handling appropriate state transitions based on disconnect reason.
# Details:
1. Create `/api/simple-matching/check-disconnect` endpoint that:
   - Polls for disconnection flags
   - Returns disconnect reason (skip/end)
   - Triggers appropriate state transition
2. Implement client-side polling with appropriate backoff
3. Add handling for different disconnect reasons
4. Implement proper cleanup after disconnect

Example implementation:
```javascript
async function checkDisconnect(userId) {
  // Get current user data
  const userData = await redis.hgetall(`user:${userId}`);
  
  // If user is in DISCONNECTING state, return reason
  if (userData.state === 'DISCONNECTING') {
    const reason = userData.disconnectReason || 'unknown';
    const initiator = userData.disconnectInitiator === 'true';
    
    // Determine target state based on reason and initiator
    let targetState = 'WAITING';
    if (reason === 'end' && initiator) {
      targetState = 'IDLE';
    }
    
    // Transition to target state if not already done
    if (userData.pendingTransition !== 'true') {
      await redis.hset(`user:${userId}`, 'pendingTransition', 'true');
      
      if (targetState === 'IDLE') {
        await moveToIdle(userId);
      } else {
        await moveToWaiting(userId);
      }
    }
    
    return {
      disconnected: true,
      reason,
      initiatedBy: initiator ? 'self' : 'other',
      targetState
    };
  }
  
  return { disconnected: false };
}
```

# Test Strategy:
1. Unit tests for check-disconnect endpoint
2. Test handling of different disconnect reasons
3. Verify proper state transitions
4. Test edge cases like concurrent disconnects
5. Benchmark performance under load
6. Test recovery from network issues during disconnect
7. Verify proper cleanup after disconnect
