# Task ID: 5
# Title: Implement End Button Functionality
# Status: in-progress
# Dependencies: 1, 3
# Priority: medium
# Description: Develop the End button functionality that ends the session for the clicking user while automatically re-queuing their partner.
# Details:
1. Create `/api/simple-matching/end` endpoint that:
   - Validates user is in IN_CALL state
   - Sets disconnection flag for other user
   - Deletes the LiveKit room
   - Moves ending user to IDLE state
   - Moves other user to WAITING state
2. Implement client-side end button UI and logic
3. Create disconnect notification with 'end' reason
4. Add logging for end actions
5. Update UI to show appropriate post-end state

Example implementation:
```javascript
async function handleEnd(userId) {
  // Get current user data
  const userData = await redis.hgetall(`user:${userId}`);
  if (userData.state !== 'IN_CALL') {
    throw new Error('User not in call');
  }
  
  // Get room data
  const roomData = await redis.hgetall(`room:${userData.currentRoom}`);
  const otherUserId = roomData.user1 === userId ? roomData.user2 : roomData.user1;
  
  // Create transaction for atomic operations
  const multi = redis.multi();
  
  // Set disconnect flags
  multi.hset(`user:${userId}`, {
    state: 'DISCONNECTING',
    disconnectReason: 'end',
    disconnectInitiator: true,
    lastStateChange: Date.now()
  });
  
  multi.hset(`user:${otherUserId}`, {
    state: 'DISCONNECTING',
    disconnectReason: 'end',
    disconnectInitiator: false,
    lastStateChange: Date.now()
  });
  
  // Execute transaction
  await multi.exec();
  
  // Delete LiveKit room
  await livekitClient.deleteRoom(userData.currentRoom);
  
  // Move ending user to IDLE state
  await moveToIdle(userId);
  
  // Move other user to WAITING state
  await moveToWaiting(otherUserId);
  
  return { success: true };
}
```

# Test Strategy:
1. Unit tests for end functionality
2. Integration tests with simulated users
3. Verify ending user returns to landing page
4. Verify other user properly returns to queue
5. Test edge cases like concurrent end/skip actions
6. Verify LiveKit room is properly deleted
7. Test with network latency and disconnections

# Subtasks:
## 1. Backend: Enhance /end Endpoint Integration [done]
### Dependencies: None
### Description: Integrate End functionality with MatchManager, RoomManager, ErrorManager, and DisconnectDetection system.
### Details:
- Validate user state
- Fetch sessionId via MatchManager
- Trigger DisconnectDetectionManager notification
- Terminate match via MatchManager.terminateMatch()
- Delete LiveKit room
- Handle errors via ErrorManager
- Return success response with next states

## 2. Frontend: Integrate updated /end endpoint & UX [in-progress]
### Dependencies: None
### Description: Update useRandomChat hook and UI to align with new /end endpoint, improve confirmation & state update.
### Details:
- Update useRandomChat.endCall to parse nextState fields
- Add optional confirmation modal before End action
- Ensure CallActionButtons triggers proper state flow after end
- Show toast message after ending
- Update random-chat types for end response
<info added on 2025-06-10T22:10:56.977Z>
Implementation plan (2025-06-10):

1. Define Type for End Response
   - File: src/types/random-chat.ts
   - Add interface EndCallResponse { success: boolean; message: string; nextState: 'IDLE' | 'WAITING' | 'CONNECTING' | 'IN_CALL'; otherUserNextState: 'IDLE' | 'WAITING' | 'CONNECTING' | 'IN_CALL' }
   - Export for use in hook.

2. Update useRandomChat.endCall
   - File: src/hooks/useRandomChat.ts
   - Fetch /api/simple-matching/end returns EndCallResponse.
   - Parse JSON; if response.ok && data.success:
       • Use toast.success(data.message)
       • setChatState(data.nextState) (fallback to 'IDLE')
     Else:
       • toast.error(error message)
       • setError(error)
   - Remove immediate setChatState('IDLE') before fetch; instead optimistically switch to 'DISCONNECTING' maybe, then after success set according to response.
   - Continue to stopPolling/stopHeartbeat and clear token/session.

3. Confirmation Modal for End Action
   - Create new component src/components/room/EndConfirmDialog.tsx using shadcn <Dialog> components.
   - Props: open, onConfirm, onCancel.
   - Display message "End the call? This will disconnect you and re-queue your partner." with Confirm and Cancel buttons.

4. Integrate modal into CallActionButtons
   - File: src/components/room/CallActionButtons.tsx
   - Manage local state showConfirm (boolean).
   - Modify End button onClick to setShowConfirm(true).
   - Render <EndConfirmDialog open={showConfirm} ...>.
   - onConfirm triggers onEnd prop then setShowConfirm(false).

5. Show toast after ending
   - Already in hook in step 2.

6. ESLint & Build checks: ensure imports ("use client"), functional components typed, no unused vars.
</info added on 2025-06-10T22:10:56.977Z>

